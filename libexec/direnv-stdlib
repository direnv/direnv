#!/bin/echo
# vim: ft=sh

if [ -z "${DIRENV_CONFIG_DIR-}" ]; then
  export DIRENV_CONFIG_DIR="${XDG_CONFIG_HOME-${HOME}/.config}/direnv"
fi

has() {
  which "$1" >/dev/null 2>&1
  return $?
}

abspath() {
  echo "abspath() renamed to expand_path()"
  expand_path "$1"
}

# Usage: expand_path ./rel/path
expand_path() {
  if [ -d "$1" ]; then
    cd "$1"
    echo $PWD
    return
  fi

  if [ -n "${parent-}" ] && [ "${parent:0:1}" = "/" ]; then
    echo $1
  else
    echo $PWD/$1
  fi
}

# Usage: user_rel_path /Users/you/some_path => ~/some_path
user_rel_path() {
  local path=${1#-}

  if [ -z "$path" ]; then return; fi

  if [ -n "$HOME" ]; then
    local rel_path="${path#$HOME}"
    if [ "$rel_path" != "$path" ]; then
      path="~${rel_path}"
    fi
  fi

  echo $path
}

# Usage: find_up some_file
find_up() {
  (
    cd "`pwd -P 2>/dev/null`"
    while true; do
      if [ -f "$1" ]; then
        echo $PWD/$1
        return 0
      fi
      if [ "$PWD" = "/" ] || [ "$PWD" = "//" ]; then
        return 1
      fi
      cd ..
    done
  )
}

direnv_find_rc() {
  local path=`find_up .envrc`
  if [ -n "$path" ]; then
    cd "$(dirname "$path")"
    return 0
  else
    return 1
  fi
}

# Safer PATH handling
#
# Usage: PATH_add PATH
# Example: PATH_add bin
PATH_add() {
  export PATH="`expand_path "$1"`:$PATH"
}

# Safer path handling
#
# Usage: path_add VARNAME PATH
# Example: path_add LD_LIBRARY_PATH ./lib
path_add() {
  local old_paths=${!1}
  local path=`expand_path "$2"`

  if [ -z "$old_paths" ]; then
    old_paths="$path"
  else
    old_paths="$path:$old_paths"
  fi

  export $1="$old_paths"
}

# Usage: layout ruby
layout_ruby() {
  # TODO: ruby_version should be the ABI version
  local ruby_version=`ruby -e"puts (defined?(RUBY_ENGINE) ? RUBY_ENGINE : 'ruby') + '-' + RUBY_VERSION"`
  PATH_add ".direnv/${ruby_version}/bin"
  PATH_add "bin"
  export RUBYLIB=$PWD/lib
  export GEM_HOME=$PWD/.direnv/${ruby_version}
  export RBXOPT=-Xrbc.db=$PWD/.direnv/rbx-cache
}

layout() {
  eval "layout_$1"
}

# This folder contains a <program-name>/<version> structure
cellar_path=/usr/local/Cellar
set_cellar_path() {
  cellar_path=$1
}

# Usage: use PROGRAM_NAME VERSION
# Example: use ruby 1.9.3
use() {
  local path="$cellar_path/$1/$2/bin"
  if [ -d "$path" ]; then
    echo "Using $1 v$2"
    PATH_add "$path"
  else
    echo "* Unable to load $path"
  fi
}

set_program_prefix() {
  echo '`set_program_prefix` was renamed to `set_cellar_path`'
}

add_program() {
  echo '`add_program` does not exist anymore and was replaced by `use`'
}

direnv_init() {
  if [[ -e $DIRENV_CONFIG_DIR && ! -d $DIRENV_CONFIG_DIR ]]; then
    echo "direnv: Failed to init direnv because $DIRENV_CONFIG_DIR" 1>&2
    echo "  exists and is not a directory" 1>&2
    return 1
  fi
  if ! mkdir -p $DIRENV_CONFIG_DIR/sums; then
    echo "direnv: failed to make $DIRENV_CONFIG_DIR" 1>&2
  fi
  #echo "Made $DIRENV_CONFIG_DIR." 1>&2
  return 0
}

# Returns the sum of "$2$(cat $2)" in the variable $1
compute_sum() {
  local  __resultvar=$1
  local filename="$2"
  local SUMCMD="shasum"
  local result=`echo "$filename" | cat - "$filename" | $SUMCMD - | cut -d' ' -f1`
  eval $__resultvar="'$result'"
}

validity_check() {
  local rcfile="$1"
  compute_sum SUM "$rcfile"
  if [ ! -f ${DIRENV_CONFIG_DIR}/sums/${SUM} ]; then
    return 1 # The file doesn't exist, so it should be ignored
  else
    return 0
  fi
}

# Inherit another .envrc
# Usage: source_env <FILE_OR_DIR_PATH>
source_env() {
  local rcfile="$1"
  if ! [ -f "$1" ]; then
    rcfile="$rcfile/.envrc"
  fi
  
  if ! validity_check "$rcfile"; then
    echo "direnv: need to run 'direnv enable' if you want to automatically source" >&2
    echo "        $rcfile" >&2
    return 0
  fi
  
  echo "direnv: loading $(user_rel_path "$rcfile")"
  pushd "`dirname "$rcfile"`" > /dev/null
  . "./`basename "$rcfile"`"
  popd > /dev/null
}

# Inherits the first .envrc (or given FILE_NAME) it finds in the path
# Usage: source_up [FILE_NAME]
source_up() {
  local file="$1"
  if [ -z "$file" ]; then
    file=".envrc"
  fi
  local path=`cd .. && find_up "$file"`
  if [ -n "$path" ]; then
    source_env "$path"
  fi
}

if [ -n "${rvm_path-}" ]; then
  # source rvm on first call, haha :)
  rvm() {
    unset rvm
    set +e
    . "$rvm_path/scripts/rvm"
    rvm $@
    set -e
  }
fi
